# Generated by Django 4.2.7 on 2025-09-25 10:41

import apps.students.models
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Guardian',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('relation', models.CharField(choices=[('FATHER', 'Father'), ('MOTHER', 'Mother'), ('GUARDIAN', 'Guardian'), ('GRANDFATHER', 'Grandfather'), ('GRANDMOTHER', 'Grandmother'), ('UNCLE', 'Uncle'), ('AUNT', 'Aunt'), ('BROTHER', 'Brother'), ('SISTER', 'Sister'), ('OTHER', 'Other')], max_length=20, verbose_name='Relation')),
                ('name', models.CharField(max_length=100, verbose_name='Full Name')),
                ('occupation', models.CharField(blank=True, choices=[('SERVICE', 'Service'), ('BUSINESS', 'Business'), ('GOVT', 'Government Job'), ('RETIRED', 'Retired'), ('HOUSEWIFE', 'Housewife'), ('FARMER', 'Farmer'), ('STUDENT', 'Student'), ('UNEMPLOYED', 'Unemployed'), ('OTHER', 'Other')], max_length=20, verbose_name='Occupation')),
                ('phone', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Phone Number')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email Address')),
                ('is_primary', models.BooleanField(default=False, verbose_name='Is Primary Guardian')),
                ('address', models.TextField(blank=True, verbose_name='Address')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='City')),
                ('state', models.CharField(blank=True, max_length=100, verbose_name='State')),
                ('pincode', models.CharField(blank=True, max_length=10, verbose_name='Pincode')),
            ],
            options={
                'verbose_name': 'Guardian',
                'verbose_name_plural': 'Guardians',
                'db_table': 'students_guardian',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=50, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=50, verbose_name='Last Name')),
                ('email', models.EmailField(max_length=254, verbose_name='Email Address')),
                ('mobile', models.CharField(max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Mobile Number')),
                ('category', models.CharField(blank=True, choices=[('', 'General'), ('SC', 'Scheduled Caste'), ('ST', 'Scheduled Tribe'), ('OBC', 'Other Backward Class'), ('OTHER', 'Other')], max_length=50)),
                ('religion', models.CharField(blank=True, choices=[('HINDU', 'Hindu'), ('MUSLIM', 'Muslim'), ('CHRISTIAN', 'Christian'), ('SIKH', 'Sikh'), ('BUDDHIST', 'Buddhist'), ('JAIN', 'Jain'), ('OTHER', 'Other')], max_length=20, verbose_name='Religion')),
                ('admission_number', models.CharField(blank=True, max_length=50, unique=True, verbose_name='Admission Number')),
                ('roll_number', models.CharField(blank=True, max_length=50, verbose_name='Roll Number')),
                ('enrollment_date', models.DateField(default=django.utils.timezone.now, verbose_name='Enrollment Date')),
                ('admission_type', models.CharField(choices=[('REGULAR', 'Regular'), ('TRANSFER', 'Transfer'), ('LATERAL', 'Lateral Entry')], default='REGULAR', max_length=20, verbose_name='Admission Type')),
                ('date_of_birth', models.DateField(verbose_name='Date of Birth')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other'), ('U', 'Undisclosed')], max_length=1, verbose_name='Gender')),
                ('blood_group', models.CharField(blank=True, choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], max_length=3, verbose_name='Blood Group')),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('ALUMNI', 'Alumni'), ('SUSPENDED', 'Suspended'), ('WITHDRAWN', 'Withdrawn')], default='ACTIVE', max_length=20, verbose_name='Status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
                'db_table': 'students_student',
                'ordering': ['first_name', 'last_name'],
            },
        ),
        migrations.CreateModel(
            name='StudentAddress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('address_type', models.CharField(choices=[('PERMANENT', 'Permanent'), ('CORRESPONDENCE', 'Correspondence')], default='PERMANENT', max_length=20, verbose_name='Address Type')),
                ('address_line1', models.CharField(max_length=255, verbose_name='Address Line 1')),
                ('address_line2', models.CharField(blank=True, max_length=255, verbose_name='Address Line 2')),
                ('city', models.CharField(max_length=100, verbose_name='City')),
                ('state', models.CharField(max_length=100, verbose_name='State')),
                ('pincode', models.CharField(max_length=10, verbose_name='Pincode')),
                ('country', models.CharField(default='India', max_length=100, verbose_name='Country')),
                ('is_current', models.BooleanField(default=True, verbose_name='Is Current Address')),
            ],
            options={
                'verbose_name': 'Student Address',
                'verbose_name_plural': 'Student Addresses',
                'db_table': 'students_address',
            },
        ),
        migrations.CreateModel(
            name='StudentDocument',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('doc_type', models.CharField(choices=[('PHOTO', 'Photograph'), ('BIRTH_CERTIFICATE', 'Birth Certificate'), ('AADHAAR', 'Aadhaar Card'), ('PREVIOUS_MARKSHEET', 'Previous Marksheet'), ('TRANSFER_CERTIFICATE', 'Transfer Certificate'), ('MEDICAL_CERTIFICATE', 'Medical Certificate'), ('CASTE_CERTIFICATE', 'Caste Certificate'), ('INCOME_CERTIFICATE', 'Income Certificate'), ('OTHER', 'Other')], max_length=50, verbose_name='Document Type')),
                ('file', models.FileField(upload_to=apps.students.models.student_document_upload_path, verbose_name='Document File')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name='Uploaded At')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Is Verified')),
            ],
            options={
                'verbose_name': 'Student Document',
                'verbose_name_plural': 'Student Documents',
                'db_table': 'students_documents',
            },
        ),
        migrations.CreateModel(
            name='StudentHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('roll_number', models.CharField(max_length=50, verbose_name='Roll Number')),
                ('final_grade', models.CharField(blank=True, max_length=5, verbose_name='Final Grade')),
                ('percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Percentage')),
                ('result', models.CharField(choices=[('PASS', 'Pass'), ('FAIL', 'Fail'), ('COMPARTMENT', 'Compartment'), ('APPEARING', 'Appearing')], max_length=20, verbose_name='Result')),
                ('remarks', models.TextField(blank=True, verbose_name='Remarks')),
                ('promoted', models.BooleanField(default=True, verbose_name='Promoted')),
                ('previous_school', models.CharField(blank=True, max_length=200, verbose_name='Previous School')),
                ('previous_class', models.CharField(blank=True, max_length=50, verbose_name='Previous Class')),
                ('previous_marks', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Previous Marks')),
                ('transfer_reason', models.TextField(blank=True, verbose_name='Transfer Reason')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Student Academic History',
                'verbose_name_plural': 'Student Academic Histories',
                'db_table': 'students_student_history',
                'ordering': ['-academic_year__start_date'],
            },
        ),
        migrations.CreateModel(
            name='StudentHostel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('room_number', models.CharField(blank=True, max_length=20, verbose_name='Room Number')),
                ('check_in_date', models.DateField(blank=True, null=True, verbose_name='Check-in Date')),
                ('check_out_date', models.DateField(blank=True, null=True, verbose_name='Check-out Date')),
                ('hostel_fee', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Hostel Fee')),
            ],
            options={
                'verbose_name': 'Student Hostel',
                'verbose_name_plural': 'Student Hostel',
                'db_table': 'students_hostel',
            },
        ),
        migrations.CreateModel(
            name='StudentIdentification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aadhaar_number', models.CharField(blank=True, max_length=12, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Aadhaar number must be 12 digits', regex='^\\d{12}$')], verbose_name='Aadhaar Number')),
                ('abc_id', models.CharField(blank=True, max_length=20, null=True, unique=True, verbose_name='ABC ID')),
                ('shiksha_id', models.CharField(blank=True, max_length=20, null=True, unique=True, verbose_name='Shiksha ID')),
                ('pan_number', models.CharField(blank=True, max_length=10, null=True, unique=True, verbose_name='PAN Number')),
                ('passport_number', models.CharField(blank=True, max_length=20, null=True, unique=True, verbose_name='Passport Number')),
            ],
            options={
                'verbose_name': 'Student Identification',
                'verbose_name_plural': 'Student Identifications',
                'db_table': 'student_identification',
            },
        ),
        migrations.CreateModel(
            name='StudentMedicalInfo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('conditions', models.TextField(blank=True, help_text='List any chronic medical conditions', verbose_name='Medical Conditions')),
                ('allergies', models.TextField(blank=True, help_text='List any known allergies', verbose_name='Allergies')),
                ('disability', models.BooleanField(default=False, verbose_name='Has Disability')),
                ('disability_type', models.CharField(blank=True, max_length=100, verbose_name='Disability Type')),
                ('disability_percentage', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Disability Percentage')),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100, verbose_name='Emergency Contact Name')),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Emergency Contact Phone')),
                ('emergency_contact_relation', models.CharField(blank=True, max_length=50, verbose_name='Emergency Contact Relation')),
            ],
            options={
                'verbose_name': 'Medical Information',
                'verbose_name_plural': 'Medical Information',
                'db_table': 'students_medical_info',
            },
        ),
        migrations.CreateModel(
            name='StudentTransport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('pickup_point', models.CharField(blank=True, max_length=200, verbose_name='Pickup Point')),
                ('drop_point', models.CharField(blank=True, max_length=200, verbose_name='Drop Point')),
                ('transport_fee', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Transport Fee')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
            ],
            options={
                'verbose_name': 'Student Transport',
                'verbose_name_plural': 'Student Transport',
                'db_table': 'students_transport',
            },
        ),
    ]
